name: Auto add Issues to Project Backlog

on:
  issues:
    types: [opened]         # 新規Issueで発火
  workflow_dispatch:         # 手動テスト用

permissions:
  contents: read
  issues: write
  repository-projects: write

env:
  OWNER_LOGIN: "DELAxGithub" # プロジェクトの所有者(login)
  PROJECT_NUMBER: "4"        # @DELAxGithub's dev board の番号
  STATUS_FIELD_NAME: "Status"
  STATUS_OPTION_NAME: "Backlog"

jobs:
  route:
    runs-on: ubuntu-latest
    steps:
      # GITHUB_TOKEN で権限が足りない場合に備えて、Secretsの PROJECTS_TOKEN を優先利用
      - name: Pick token (PAT > GITHUB_TOKEN)
        id: tok
        run: |
          if [ -n "${{ secrets.PROJECTS_TOKEN }}" ]; then
            echo "token=${{ secrets.PROJECTS_TOKEN }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ github.token }}" >> $GITHUB_OUTPUT
          fi

      - name: Add issue to Project and set Status=Backlog
        env:
          GH_TOKEN: ${{ steps.tok.outputs.token }}
        run: |
          set -euo pipefail

          login="$OWNER_LOGIN"
          number="$PROJECT_NUMBER"
          issue_node="${{ github.event.issue.node_id }}"

          # 1) プロジェクトID と Status/Backlog の各ID取得（user専用）
          resp=$(gh api graphql -F login="$login" -F number="$number" -f query='
            query($login:String!, $number:Int!) {
              user(login:$login) {
                projectV2(number:$number) {
                  id
                  fields(first:100) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id name
                        options { id name }
                      }
                    }
                  }
                }
              }
            }')

          project_id=$(echo "$resp" | jq -r '.data.user.projectV2.id')
          status_field_id=$(echo "$resp" | jq -r --arg n "$STATUS_FIELD_NAME" '
            .data.user.projectV2.fields.nodes[] | select(.name==$n) | .id
          ')
          backlog_option_id=$(echo "$resp" | jq -r --arg n "$STATUS_FIELD_NAME" --arg o "$STATUS_OPTION_NAME" '
            .data.user.projectV2.fields.nodes[] | select(.name==$n) | .options[] | select(.name==$o) | .id
          ')

          [ -n "$project_id" ] && [ "$project_id" != "null" ] || { echo "Project not found"; exit 1; }
          [ -n "$status_field_id" ] && [ "$status_field_id" != "null" ] || { echo "Status field not found"; exit 1; }
          [ -n "$backlog_option_id" ] && [ "$backlog_option_id" != "null" ] || { echo "Backlog option not found"; exit 1; }

          # 2) プロジェクトへ追加（既に入っている場合は後段の更新だけ行う）
          add=$(gh api graphql -f query='
            mutation($p:ID!, $c:ID!){
              addProjectV2ItemById(input:{projectId:$p, contentId:$c}) {
                item { id }
              }
            }' -F p="$project_id" -F c="$issue_node" || true)

          item_id=$(echo "$add" | jq -r '.data.addProjectV2ItemById.item.id // empty')
          if [ -z "$item_id" ]; then
            # 既存アイテムを拾い直す（100件まで）
            lookup=$(gh api graphql -f query='
              query($p:ID!) {
                node(id:$p) {
                  ... on ProjectV2 {
                    items(first:100) {
                      nodes { id content { ... on Issue { id } } }
                    }
                  }
                }
              }' -F p="$project_id")
            item_id=$(echo "$lookup" | jq -r --arg i "$issue_node" '.data.node.items.nodes[] | select(.content.id==$i) | .id')
          fi
          [ -n "$item_id" ] || { echo "Failed to obtain project item id"; exit 1; }

          # 3) Status = Backlog に設定
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $option:String!) {
              updateProjectV2ItemFieldValue(input:{
                projectId:$project,
                itemId:$item,
                fieldId:$field,
                value:{ singleSelectOptionId:$option }
              }) { projectV2Item { id } }
            }' \
            -F project="$project_id" -F item="$item_id" -F field="$status_field_id" -F option="$backlog_option_id"